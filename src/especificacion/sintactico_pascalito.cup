package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;


parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a침adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci칩n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0)
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;

	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

:}


/* Declaraci칩n de terminales */
terminal PLUS, MINUS, TIMES, OVER, MOD;
terminal LT, LE, GT, GE, EQ, NE;
terminal AND, OR, NOT;
terminal ASSIGN;
terminal SEMICOLON, COMMA, LPAREN, RPAREN;
terminal IF, THEN, ELSE, FOR, REPEAT, UNTIL;
terminal BEGIN, END, VAR, INTEGER, BOOLEAN, COLON;
terminal TO, DO;
terminal READ, WRITE;
terminal String NUMBER, TRUE, FALSE;
terminal String ID;

/* Declaraci칩n de no terminales */

non terminal program;
non terminal NodoBase program_body;
non terminal NodoBase var_declaration_list;
non terminal NodoBase var_declaration;
non terminal NodoBase var_list;
non terminal Tipos type;
non terminal NodoBase statement_list;
non terminal NodoBase statement;
non terminal NodoBase assign_stm;
non terminal NodoBase if_stm;
non terminal NodoFor for_stm;
non terminal NodoRepeat repeat_stm;
non terminal NodoLeer read_stm;
non terminal NodoEscribir write_stm;
non terminal NodoBase expr;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase condition;
non terminal NodoBase bool_expr;
non terminal NodoBase boolean_value;

/* Precedencia de operadores */
precedence left OR;
precedence left AND;
precedence left EQ, NE, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, OVER, MOD;
precedence left NOT;


/* Reglas sintacticas */

program ::= program_body:raiz {:
            if(raiz == null){
                throw new RuntimeException("No hay programa");
            }
            ast = raiz;
        :}
        ;

program_body ::= VAR var_declaration_list:decl BEGIN statement_list:stm END {:
                RESULT = new NodoPrograma(decl, stm);
            :}
            | BEGIN statement_list:stm END {:
                RESULT = new NodoPrograma(stm);
            :}
            ;


var_declaration_list ::= var_declaration_list:ini var_declaration:sent  {:
                                                NodoBase hijoActual = ini;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(sent);
                                                    RESULT=ini;
                                                }else{
                                                    RESULT=sent;
                                                    }
                                                :}

                       | var_declaration:sent  {:
                                               RESULT=sent;
                                               :}
                       ;

var_declaration ::= var_list:list COLON type:tipo SEMICOLON  {:
                                                RESULT = list;
                                                :}
                                                ;

var_list ::= var_list:ini COMMA ID:variable {:
                                             NodoBase hijoActual = ini;
                                             if(hijoActual !=null){
                                            	while(hijoActual.TieneHermano()){
                                            		hijoActual = hijoActual.getHermanoDerecha();
                                            	}
                                            	hijoActual.setHermanoDerecha(new NodoIdentificador(variable.toString()));
                                            	RESULT=ini;
                                            	}else{
                                            		RESULT = new NodoIdentificador(variable.toString());
                                            	}
                                             :}
           | ID:variable {:
                           if(variable!=null){
                                System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                RESULT= new NodoIdentificador(variable.toString());
                           }else{
                                 RESULT = null;
                                 System.out.println("Ocurrio error en factor id");
                           }
                           :}
           ;

type ::= INTEGER {: RESULT=Tipos.integer; :}
       | BOOLEAN {: RESULT=Tipos.bool; :}
       ;

statement_list ::= statement_list:ini statement:sent  {:
                        NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
                 :}
                 | statement:sent {:
                    RESULT=sent;
                 :}
                 ;

statement ::= assign_stm:sasi {:
                                RESULT=sasi;
                              :}
            | if_stm:sif {:
                            RESULT=sif;
                         :}
            | for_stm:sfor {:
                            RESULT=sfor;
                           :}
            | repeat_stm:srep  {:
                                RESULT=srep;
                            :}
            | read_stm:sread {:
                                RESULT=sread;
                              :}
            | write_stm:swri {:
                                RESULT=swri;
                              :}
            | error	{:
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

assign_stm ::= ID:variable ASSIGN expr:ex SEMICOLON {:
                                    if(variable!=null)
                                        RESULT = new NodoAsignacion(variable.toString(),ex);
                                    else{
                                        RESULT = null;
                                        System.out.println("Ocurrio error en assign");
                                    }
                                    :}
            | ID:variable ASSIGN boolean_value:ex SEMICOLON {:
                                    if(variable!=null)
                                        RESULT = new NodoAsignacion(variable.toString(),ex);
                                    else{
                                        RESULT = null;
                                        System.out.println("Ocurrio error en assign");
                                    }
                                    :}
            ;

if_stm ::= IF bool_expr:ex THEN statement_list:pthen SEMICOLON  {:
                                                       		RESULT = new NodoIf(ex,pthen);
                                                        :}
        | IF bool_expr:ex THEN statement_list:pthen ELSE statement_list:pelse SEMICOLON {:
                                                                              		RESULT = new NodoIf(ex,pthen,pelse);
                                                                              	:}
        ;

for_stm ::= FOR ID:variable ASSIGN expr:inicial TO expr:vfinal DO statement_list:cuerpo SEMICOLON {:
                                                                                    RESULT = new NodoFor(variable.toString(),inicial,vfinal,cuerpo);
                                                                               :}
        ;

repeat_stm ::= REPEAT statement_list:body UNTIL bool_expr:ex SEMICOLON 	{:
                                                               		RESULT = new NodoRepeat(body,ex);
                                                               	:}
        ;

read_stm ::= READ ID:variable	{:
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup read");
					}
					:}
		;

write_stm ::= WRITE expr:ex	{:
					RESULT= new NodoEscribir(ex);
					:}
		;

expr ::= expr:exI PLUS term:exD {:
                        		RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
                        	    :}
       | expr:exI MINUS term:exD  {:
                                    RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
                                   :}
       | term:termino {:
                     RESULT = termino;
                     :}
       ;

term ::= term:exI TIMES factor:exD {:
                                     RESULT = new NodoOperacion(exI,tipoOp.por,exD);
                                    :}
       | term:exI OVER factor:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
                                     :}
       | term:exI MOD factor:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
                                  :}
       | factor: fac {:
                        RESULT = fac;
                      :}
       ;

factor ::= LPAREN expr:ex RPAREN {:
                                    RESULT = ex;
                                 :}
         | NUMBER:valor {:
                        	if(valor!=null){
                        		RESULT= new NodoValor(Integer.parseInt(valor));
                        	}else{
                        		RESULT = null;
                        		System.out.println("Ocurrio error en factor number");
                        	}
                        :}
         | ID:variable {:
                       		if(variable!=null){
                       			System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                       			RESULT= new NodoIdentificador(variable.toString());
                       		}else{
                       			RESULT = null;
                       			System.out.println("Ocurrio error en factor id");
                       		}
                       	:}
         | error {:
                    System.out.println("Ocurrio error en factor");
                    RESULT=null;
                  :}
         ;

condition ::= expr:exI LT expr:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                                    :}
            | expr:exI LE expr:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
                                    :}
            | expr:exI GT expr:exD {:
                                     RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                                    :}
            | expr:exI GE expr:exD {:
                                     RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);
                                    :}
            | expr:exI EQ expr:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                                    :}
            | expr:exI NE expr:exD {:
                                      RESULT = new NodoOperacion(exI,tipoOp.noIgual,exD);
                                    :}
            ;

bool_expr ::= bool_expr:exI OR bool_expr:exD {:
                                         RESULT = new NodoOperacion(exI,tipoOp.o,exD);
                                      :}
            | bool_expr:exI AND bool_expr:exD {:
                                         RESULT = new NodoOperacion(exI,tipoOp.y,exD);
                                       :}
            | NOT bool_expr:ex {:
                                  RESULT = new NodoOperacion(null,tipoOp.negacion,ex);
                                :}
            | condition:cond {:
                           RESULT = cond;
                         :}
            ;

boolean_value ::= TRUE:verdadero {: RESULT= new NodoBool(Boolean.parseBoolean(verdadero)); :}
                | FALSE:falso {: RESULT= new NodoBool(Boolean.parseBoolean(falso)); :}
                ;






































