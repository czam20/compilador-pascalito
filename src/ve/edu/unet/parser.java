
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\003" +
    "\007\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\006\000\002\006\005\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\012\006\000" +
    "\002\013\007\000\002\013\011\000\002\014\013\000\002" +
    "\015\007\000\002\016\004\000\002\017\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\004\000" +
    "\002\024\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\035\007\037\004\001\002\000\004\052" +
    "\134\001\002\000\004\002\133\001\002\000\004\002\001" +
    "\001\002\000\020\003\023\027\017\032\013\033\011\045" +
    "\010\046\021\052\020\001\002\000\004\052\132\001\002" +
    "\000\020\003\023\027\017\032\013\033\011\045\010\046" +
    "\021\052\020\001\002\000\030\003\ufff4\023\ufff4\027\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\045\ufff4\046" +
    "\ufff4\052\ufff4\001\002\000\004\052\116\001\002\000\030" +
    "\003\ufff0\023\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\036\ufff0\045\ufff0\046\ufff0\052\ufff0\001\002\000\030" +
    "\003\ufff3\023\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\036\ufff3\045\ufff3\046\ufff3\052\ufff3\001\002\000\030" +
    "\003\ufff2\023\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\036\ufff2\045\ufff2\046\ufff2\052\ufff2\001\002\000\014" +
    "\003\032\021\065\025\036\047\035\052\031\001\002\000" +
    "\004\022\054\001\002\000\012\003\032\025\036\047\035" +
    "\052\031\001\002\000\030\003\ufff5\023\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\045\ufff5\046\ufff5" +
    "\052\ufff5\001\002\000\030\003\uffee\023\uffee\027\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\036\uffee\045\uffee\046\uffee" +
    "\052\uffee\001\002\000\022\003\023\027\017\032\013\033" +
    "\011\036\030\045\010\046\021\052\020\001\002\000\030" +
    "\003\uffef\023\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\036\uffef\045\uffef\046\uffef\052\uffef\001\002\000\030" +
    "\003\ufff1\023\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\036\ufff1\045\ufff1\046\ufff1\052\ufff1\001\002\000\030" +
    "\003\ufff6\023\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\036\ufff6\045\ufff6\046\ufff6\052\ufff6\001\002\000\004" +
    "\002\ufffe\001\002\000\072\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\052\uffdc\001\002\000" +
    "\072\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\036\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\052\uffdb\001\002\000\072\003\uffe3\004\uffe3" +
    "\005\uffe3\006\045\007\044\010\043\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\036\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\052\uffe3" +
    "\001\002\000\072\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\023\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\052\uffdf\001\002\000\072\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\036\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\052\uffdd\001\002\000\012\003\032\025\036\047\035" +
    "\052\031\001\002\000\034\003\uffe6\004\040\005\041\023" +
    "\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6" +
    "\045\uffe6\046\uffe6\052\uffe6\001\002\000\012\003\032\025" +
    "\036\047\035\052\031\001\002\000\012\003\032\025\036" +
    "\047\035\052\031\001\002\000\072\003\uffe4\004\uffe4\005" +
    "\uffe4\006\045\007\044\010\043\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\036\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\052\uffe4\001" +
    "\002\000\012\003\032\025\036\047\035\052\031\001\002" +
    "\000\012\003\032\025\036\047\035\052\031\001\002\000" +
    "\012\003\032\025\036\047\035\052\031\001\002\000\072" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\052\uffe2\001\002\000\072\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\052\uffe1\001" +
    "\002\000\072\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\052\uffe0\001\002\000\072\003\uffe5" +
    "\004\uffe5\005\uffe5\006\045\007\044\010\043\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\023\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\036\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\052\uffe5\001\002\000\010\004\040\005\041\026\053\001" +
    "\002\000\072\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\023\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\052\uffde\001\002\000\016\003\032" +
    "\025\036\047\035\050\055\051\056\052\031\001\002\000" +
    "\004\023\uffd0\001\002\000\004\023\uffcf\001\002\000\010" +
    "\004\040\005\041\023\062\001\002\000\004\023\061\001" +
    "\002\000\030\003\uffec\023\uffec\027\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\036\uffec\045\uffec\046\uffec\052\uffec\001" +
    "\002\000\030\003\uffed\023\uffed\027\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\036\uffed\045\uffed\046\uffed\052\uffed\001" +
    "\002\000\012\017\uffd1\020\uffd1\023\uffd1\030\uffd1\001\002" +
    "\000\010\017\104\020\105\030\110\001\002\000\014\003" +
    "\032\021\065\025\036\047\035\052\031\001\002\000\022" +
    "\004\040\005\041\011\067\012\072\013\071\014\073\015" +
    "\070\016\074\001\002\000\012\003\032\025\036\047\035" +
    "\052\031\001\002\000\012\003\032\025\036\047\035\052" +
    "\031\001\002\000\012\003\032\025\036\047\035\052\031" +
    "\001\002\000\012\003\032\025\036\047\035\052\031\001" +
    "\002\000\012\003\032\025\036\047\035\052\031\001\002" +
    "\000\012\003\032\025\036\047\035\052\031\001\002\000" +
    "\016\004\040\005\041\017\uffd5\020\uffd5\023\uffd5\030\uffd5" +
    "\001\002\000\016\004\040\005\041\017\uffd7\020\uffd7\023" +
    "\uffd7\030\uffd7\001\002\000\016\004\040\005\041\017\uffd9" +
    "\020\uffd9\023\uffd9\030\uffd9\001\002\000\016\004\040\005" +
    "\041\017\uffd8\020\uffd8\023\uffd8\030\uffd8\001\002\000\016" +
    "\004\040\005\041\017\uffd6\020\uffd6\023\uffd6\030\uffd6\001" +
    "\002\000\016\004\040\005\041\017\uffda\020\uffda\023\uffda" +
    "\030\uffda\001\002\000\012\017\uffd2\020\uffd2\023\uffd2\030" +
    "\uffd2\001\002\000\014\003\032\021\065\025\036\047\035" +
    "\052\031\001\002\000\014\003\032\021\065\025\036\047" +
    "\035\052\031\001\002\000\012\017\104\020\uffd4\023\uffd4" +
    "\030\uffd4\001\002\000\012\017\uffd3\020\uffd3\023\uffd3\030" +
    "\uffd3\001\002\000\020\003\023\027\017\032\013\033\011" +
    "\045\010\046\021\052\020\001\002\000\024\003\023\023" +
    "\113\027\017\031\112\032\013\033\011\045\010\046\021" +
    "\052\020\001\002\000\020\003\023\027\017\032\013\033" +
    "\011\045\010\046\021\052\020\001\002\000\030\003\uffeb" +
    "\023\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036" +
    "\uffeb\045\uffeb\046\uffeb\052\uffeb\001\002\000\022\003\023" +
    "\023\115\027\017\032\013\033\011\045\010\046\021\052" +
    "\020\001\002\000\030\003\uffea\023\uffea\027\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\036\uffea\045\uffea\046\uffea\052" +
    "\uffea\001\002\000\004\022\117\001\002\000\012\003\032" +
    "\025\036\047\035\052\031\001\002\000\010\004\040\005" +
    "\041\043\121\001\002\000\012\003\032\025\036\047\035" +
    "\052\031\001\002\000\010\004\040\005\041\044\123\001" +
    "\002\000\020\003\023\027\017\032\013\033\011\045\010" +
    "\046\021\052\020\001\002\000\022\003\023\023\125\027" +
    "\017\032\013\033\011\045\010\046\021\052\020\001\002" +
    "\000\030\003\uffe9\023\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\036\uffe9\045\uffe9\046\uffe9\052\uffe9\001\002" +
    "\000\022\003\023\027\017\032\013\033\011\034\127\045" +
    "\010\046\021\052\020\001\002\000\014\003\032\021\065" +
    "\025\036\047\035\052\031\001\002\000\010\017\104\020" +
    "\105\023\131\001\002\000\030\003\uffe8\023\uffe8\027\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\045\uffe8\046" +
    "\uffe8\052\uffe8\001\002\000\030\003\uffe7\023\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\045\uffe7\046" +
    "\uffe7\052\uffe7\001\002\000\004\002\000\001\002\000\006" +
    "\024\ufff9\042\ufff9\001\002\000\006\024\144\042\145\001" +
    "\002\000\006\035\ufffc\052\ufffc\001\002\000\006\035\141" +
    "\052\134\001\002\000\006\035\ufffd\052\ufffd\001\002\000" +
    "\020\003\023\027\017\032\013\033\011\045\010\046\021" +
    "\052\020\001\002\000\022\003\023\027\017\032\013\033" +
    "\011\036\143\045\010\046\021\052\020\001\002\000\004" +
    "\002\uffff\001\002\000\004\052\152\001\002\000\006\040" +
    "\146\041\150\001\002\000\004\023\ufff8\001\002\000\004" +
    "\023\151\001\002\000\004\023\ufff7\001\002\000\006\035" +
    "\ufffb\052\ufffb\001\002\000\006\024\ufffa\042\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\002\004\003\005\001\001\000\010\004" +
    "\136\005\135\006\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\023\011\021\012\011\013\014\014" +
    "\015\015\025\016\013\017\024\001\001\000\002\001\001" +
    "\000\022\010\125\011\021\012\011\013\014\014\015\015" +
    "\025\016\013\017\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\065\021\032\022\033\023\062\024\063" +
    "\001\001\000\002\001\001\000\010\020\036\021\032\022" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\026\012\011\013\014\014\015\015\025\016\013\017" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\051\021\032\022\033\001\001\000\002\001" +
    "\001\000\006\021\050\022\033\001\001\000\006\021\041" +
    "\022\033\001\001\000\002\001\001\000\004\022\047\001" +
    "\001\000\004\022\046\001\001\000\004\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\056\021\032\022\033\025\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\065\021\032\022\033\023\062" +
    "\024\102\001\001\000\002\001\001\000\010\020\101\021" +
    "\032\022\033\001\001\000\010\020\100\021\032\022\033" +
    "\001\001\000\010\020\077\021\032\022\033\001\001\000" +
    "\010\020\076\021\032\022\033\001\001\000\010\020\075" +
    "\021\032\022\033\001\001\000\010\020\074\021\032\022" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\065\021\032\022\033" +
    "\023\062\024\106\001\001\000\014\020\065\021\032\022" +
    "\033\023\062\024\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\110\011\021\012\011\013\014\014" +
    "\015\015\025\016\013\017\024\001\001\000\020\011\026" +
    "\012\011\013\014\014\015\015\025\016\013\017\024\001" +
    "\001\000\022\010\113\011\021\012\011\013\014\014\015" +
    "\015\025\016\013\017\024\001\001\000\002\001\001\000" +
    "\020\011\026\012\011\013\014\014\015\015\025\016\013" +
    "\017\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\117\021\032\022\033\001\001\000\002\001\001" +
    "\000\010\020\121\021\032\022\033\001\001\000\002\001" +
    "\001\000\022\010\123\011\021\012\011\013\014\014\015" +
    "\015\025\016\013\017\024\001\001\000\020\011\026\012" +
    "\011\013\014\014\015\015\025\016\013\017\024\001\001" +
    "\000\002\001\001\000\020\011\026\012\011\013\014\014" +
    "\015\015\025\016\013\017\024\001\001\000\014\020\065" +
    "\021\032\022\033\023\062\024\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\137\006\134\001\001\000\002\001\001\000\022" +
    "\010\141\011\021\012\011\013\014\014\015\015\025\016" +
    "\013\017\024\001\001\000\020\011\026\012\011\013\014" +
    "\014\015\015\025\016\013\017\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0)
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;

	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program_body 
            {
              Object RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase raiz = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(raiz == null){
                throw new RuntimeException("No hay programa");
            }
            ast = raiz;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_body ::= VAR var_declaration_list BEGIN statement_list END 
            {
              NodoBase RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase stm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new NodoPrograma(decl, stm);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_body ::= BEGIN statement_list END 
            {
              NodoBase RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase stm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new NodoPrograma(stm);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_declaration_list ::= var_declaration_list var_declaration 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                NodoBase hijoActual = ini;
                                                if(hijoActual !=null){
                                                    while(hijoActual.TieneHermano()){
                                                        hijoActual = hijoActual.getHermanoDerecha();
                                                    }
                                                    hijoActual.setHermanoDerecha(sent);
                                                    RESULT=ini;
                                                }else{
                                                    RESULT=sent;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_declaration_list ::= var_declaration 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                               RESULT=sent;
                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= var_list COLON type SEMICOLON 
            {
              NodoBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase list = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                RESULT = list;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_list ::= var_list COMMA ID 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             NodoBase hijoActual = ini;
                                             if(hijoActual !=null){
                                            	while(hijoActual.TieneHermano()){
                                            		hijoActual = hijoActual.getHermanoDerecha();
                                            	}
                                            	hijoActual.setHermanoDerecha(new NodoIdentificador(variable.toString()));
                                            	RESULT=ini;
                                            	}else{
                                            		RESULT = new NodoIdentificador(variable.toString());
                                            	}
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           if(variable!=null){
                                System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                                RESULT= new NodoIdentificador(variable.toString());
                           }else{
                                 RESULT = null;
                                 System.out.println("Ocurrio error en factor id");
                           }
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INTEGER 
            {
              Tipos RESULT =null;
		 RESULT=Tipos.integer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              Tipos RESULT =null;
		 RESULT=Tipos.bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_list ::= statement_list statement 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_list ::= statement 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=sent;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= assign_stm 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=sasi;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= if_stm 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT=sif;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= for_stm 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoFor sfor = (NodoFor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT=sfor;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= repeat_stm 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoRepeat srep = (NodoRepeat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=srep;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= read_stm 
            {
              NodoBase RESULT =null;
		int sreadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sreadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoLeer sread = (NodoLeer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=sread;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= write_stm 
            {
              NodoBase RESULT =null;
		int swrileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swriright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoEscribir swri = (NodoEscribir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=swri;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= error 
            {
              NodoBase RESULT =null;
		
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_stm ::= ID ASSIGN expr SEMICOLON 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    if(variable!=null)
                                        RESULT = new NodoAsignacion(variable.toString(),ex);
                                    else{
                                        RESULT = null;
                                        System.out.println("Ocurrio error en assign");
                                    }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stm",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign_stm ::= ID ASSIGN boolean_value SEMICOLON 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    if(variable!=null)
                                        RESULT = new NodoAsignacion(variable.toString(),ex);
                                    else{
                                        RESULT = null;
                                        System.out.println("Ocurrio error en assign");
                                    }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stm",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stm ::= IF bool_expr THEN statement_list SEMICOLON 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                       		RESULT = new NodoIf(ex,pthen);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stm",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stm ::= IF bool_expr THEN statement_list ELSE statement_list SEMICOLON 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                              		RESULT = new NodoIf(ex,pthen,pelse);
                                                                              	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stm",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_stm ::= FOR ID ASSIGN expr TO expr DO statement_list SEMICOLON 
            {
              NodoFor RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase inicial = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vfinalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vfinalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase vfinal = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                    RESULT = new NodoFor(variable.toString(),inicial,vfinal,cuerpo);
                                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stm",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // repeat_stm ::= REPEAT statement_list UNTIL bool_expr SEMICOLON 
            {
              NodoRepeat RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               		RESULT = new NodoRepeat(body,ex);
                                                               	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stm",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read_stm ::= READ ID 
            {
              NodoLeer RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup read");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stm",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // write_stm ::= WRITE expr 
            {
              NodoEscribir RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stm",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        		RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
                        	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= term 
            {
              NodoBase RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase termino = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = termino;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                     RESULT = new NodoOperacion(exI,tipoOp.por,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term MOD factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= factor 
            {
              NodoBase RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fac = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = fac;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= LPAREN expr RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    RESULT = ex;
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= NUMBER 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        	if(valor!=null){
                        		RESULT= new NodoValor(Integer.parseInt(valor));
                        	}else{
                        		RESULT = null;
                        		System.out.println("Ocurrio error en factor number");
                        	}
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       		if(variable!=null){
                       			System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                       			RESULT= new NodoIdentificador(variable.toString());
                       		}else{
                       			RESULT = null;
                       			System.out.println("Ocurrio error en factor id");
                       		}
                       	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= error 
            {
              NodoBase RESULT =null;
		
                    System.out.println("Ocurrio error en factor");
                    RESULT=null;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= expr LT expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condition ::= expr LE expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condition ::= expr GT expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                     RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condition ::= expr GE expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                     RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condition ::= expr EQ expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condition ::= expr NE expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      RESULT = new NodoOperacion(exI,tipoOp.noIgual,exD);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_expr ::= bool_expr OR bool_expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         RESULT = new NodoOperacion(exI,tipoOp.o,exD);
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_expr ::= bool_expr AND bool_expr 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         RESULT = new NodoOperacion(exI,tipoOp.y,exD);
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr ::= NOT bool_expr 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  RESULT = new NodoOperacion(null,tipoOp.negacion,ex);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr ::= condition 
            {
              NodoBase RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cond = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = cond;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_value ::= TRUE 
            {
              NodoBase RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new NodoBool(Boolean.parseBoolean(verdadero)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_value",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_value ::= FALSE 
            {
              NodoBase RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new NodoBool(Boolean.parseBoolean(falso)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_value",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
